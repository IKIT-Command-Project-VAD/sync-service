// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SyncService.Infrastructure.Persistence.Context;

#nullable disable

namespace SyncService.src.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SyncDbContext))]
    [Migration("20251017135502_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "operation_type", new[] { "create", "update", "delete" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SyncService.Domain.Entities.ChangeOperation", b =>
                {
                    b.Property<Guid>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("operation_id");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("batch_id");

                    b.Property<long?>("ClientVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("client_version");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<string>("NewValue")
                        .HasColumnType("text")
                        .HasColumnName("new_value");

                    b.Property<Guid?>("OfflineChangeBatchBatchId")
                        .HasColumnType("uuid");

                    b.Property<string>("OldValue")
                        .HasColumnType("text")
                        .HasColumnName("old_value");

                    b.Property<int>("OperationType")
                        .HasColumnType("operation_type")
                        .HasColumnName("operation_type");

                    b.HasKey("OperationId");

                    b.HasIndex("BatchId");

                    b.HasIndex("OfflineChangeBatchBatchId");

                    b.ToTable("change_operations", (string)null);
                });

            modelBuilder.Entity("SyncService.Domain.Entities.Checkpoint", b =>
                {
                    b.Property<Guid>("CheckpointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("checkpoint_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid")
                        .HasColumnName("list_id");

                    b.Property<string>("SnapshotJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("snapshot_json");

                    b.Property<long>("Version")
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("CheckpointId");

                    b.ToTable("checkpoints", (string)null);
                });

            modelBuilder.Entity("SyncService.Domain.Entities.OfflineChangeBatch", b =>
                {
                    b.Property<Guid>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("batch_id");

                    b.Property<long>("ClientVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("client_version");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid")
                        .HasColumnName("list_id");

                    b.Property<DateTimeOffset>("ReceivedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("received_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("BatchId");

                    b.ToTable("offline_change_batch", (string)null);
                });

            modelBuilder.Entity("SyncService.Domain.Entities.ChangeOperation", b =>
                {
                    b.HasOne("SyncService.Domain.Entities.OfflineChangeBatch", "OfflineChangeBatch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SyncService.Domain.Entities.OfflineChangeBatch", null)
                        .WithMany("Operations")
                        .HasForeignKey("OfflineChangeBatchBatchId");

                    b.Navigation("OfflineChangeBatch");
                });

            modelBuilder.Entity("SyncService.Domain.Entities.OfflineChangeBatch", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
